@{
header_guard = "RCLDOTNET_{0}_{1}_{2}_H".format(package_name, subfolder, convert_camel_case_to_lower_case_underscore(type_name)).upper()
}@
#ifndef @(header_guard)
#define @(header_guard)

typedef struct rcldotnet_@(package_name)_@(subfolder)_@(type_name)_t
{
@[for field in spec.fields]@

@[    if field.type.is_array]@
// TODO(esteve): Arrays are not supported
    void * @(upperfirst(field.name));
@[    else]@
@[        if field.type.is_primitive_type()]@
    @(primitive_msg_type_to_c(field.type.type)) @(upperfirst(field.name));
@[        else]@
// TODO(esteve): Nested types are not supported
    void * @(upperfirst(field.name));
@[        end if]@
@[    end if]@
@[end for]@

@[if not spec.fields]@
  // Dummy field so that the C compiler does not complain about empty structs.
  bool _dummy;
@[end if]@
} rcldotnet_@(package_name)_@(subfolder)_@(type_name)_t;

__declspec(dllexport)
void * __cdecl native_get_from_dotnet_converter();

__declspec(dllexport)
void * __cdecl native_get_to_dotnet_converter();

__declspec(dllexport)
const void * __cdecl native_get_typesupport();

#endif // @(header_guard)
